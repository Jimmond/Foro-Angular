/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { NgxHighlightJsThemeService } from './ngx-highlight-js-theme.service';
import { NgxHighlightJsScriptService } from './ngx-highlight-js-script.service';
import * as i0 from "@angular/core";
import * as i1 from "./ngx-highlight-js-theme.service";
import * as i2 from "./ngx-highlight-js-script.service";
export class NgxHighlightJsService {
    /**
     * @param {?} themeService
     * @param {?} scriptService
     */
    constructor(themeService, scriptService) {
        this.themeService = themeService;
        this.scriptService = scriptService;
    }
    /**
     * @return {?}
     */
    get theme() {
        return this.themeService._theme;
    }
    /**
     * @return {?}
     */
    loaded() {
        if (this._loadedPromise) {
            return this._loadedPromise;
        }
        const /** @type {?} */ promises = [this.scriptService.loaded(), this.themeService.initialized()];
        this._loadedPromise = Promise.all(promises)
            .then((results) => {
            this._hljs = results[0];
            return (this._hljs);
        });
        return this._loadedPromise;
    }
    /**
     * @param {?} lang
     * @return {?}
     */
    loadLanguage(lang) {
        return this.scriptService.loadLanguage(lang);
    }
    /**
     * @param {?} name
     * @return {?}
     */
    loadTheme(name) {
        return this.themeService.loadTheme(name);
    }
    /**
     * @param {?} lang
     * @param {?} code
     * @return {?}
     */
    highlight(lang, code) {
        return this.loaded()
            .then(() => {
            return this.loadLanguage(lang);
        })
            .then(() => {
            const /** @type {?} */ hl = this._hljs.highlight(lang, code, true).value;
            return hl;
        });
    }
}
NgxHighlightJsService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
NgxHighlightJsService.ctorParameters = () => [
    { type: NgxHighlightJsThemeService },
    { type: NgxHighlightJsScriptService }
];
/** @nocollapse */ NgxHighlightJsService.ngInjectableDef = i0.defineInjectable({ factory: function NgxHighlightJsService_Factory() { return new NgxHighlightJsService(i0.inject(i1.NgxHighlightJsThemeService), i0.inject(i2.NgxHighlightJsScriptService)); }, token: NgxHighlightJsService, providedIn: "root" });
function NgxHighlightJsService_tsickle_Closure_declarations() {
    /** @type {?} */
    NgxHighlightJsService.prototype._hljs;
    /** @type {?} */
    NgxHighlightJsService.prototype._loadedPromise;
    /** @type {?} */
    NgxHighlightJsService.prototype.themeService;
    /** @type {?} */
    NgxHighlightJsService.prototype.scriptService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWhpZ2hsaWdodC1qcy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5vd3pvby9uZ3gtaGlnaGxpZ2h0LWpzLyIsInNvdXJjZXMiOlsibGliL25neC1oaWdobGlnaHQtanMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUM5RSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQzs7OztBQUloRixNQUFNOzs7OztJQVFKLFlBQ1UsY0FDQTtRQURBLGlCQUFZLEdBQVosWUFBWTtRQUNaLGtCQUFhLEdBQWIsYUFBYTtLQUNsQjs7OztJQU5MLElBQUksS0FBSztRQUNQLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQztLQUNqQzs7OztJQU1ELE1BQU07UUFDSixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztZQUN4QixNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQztTQUM1QjtRQUNELHVCQUFNLFFBQVEsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQ2hGLElBQUksQ0FBQyxjQUFjLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUM7YUFDeEMsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDaEIsSUFBSSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDeEIsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3JCLENBQUMsQ0FBQztRQUNMLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDO0tBQzVCOzs7OztJQUVELFlBQVksQ0FBQyxJQUFZO1FBQ3ZCLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUM5Qzs7Ozs7SUFFRCxTQUFTLENBQUMsSUFBWTtRQUNwQixNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDMUM7Ozs7OztJQUVELFNBQVMsQ0FBQyxJQUFZLEVBQUUsSUFBWTtRQUNsQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTthQUNqQixJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ1QsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDaEMsQ0FBQzthQUNELElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDVCx1QkFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUM7WUFDeEQsTUFBTSxDQUFDLEVBQUUsQ0FBQztTQUNYLENBQUMsQ0FBQztLQUNOOzs7WUE5Q0YsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7O1lBSlEsMEJBQTBCO1lBQzFCLDJCQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5neEhpZ2hsaWdodEpzVGhlbWVTZXJ2aWNlIH0gZnJvbSAnLi9uZ3gtaGlnaGxpZ2h0LWpzLXRoZW1lLnNlcnZpY2UnO1xuaW1wb3J0IHsgTmd4SGlnaGxpZ2h0SnNTY3JpcHRTZXJ2aWNlIH0gZnJvbSAnLi9uZ3gtaGlnaGxpZ2h0LWpzLXNjcmlwdC5zZXJ2aWNlJztcbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE5neEhpZ2hsaWdodEpzU2VydmljZSB7XG4gIHByaXZhdGUgX2hsanM6IGFueTtcbiAgcHJpdmF0ZSBfbG9hZGVkUHJvbWlzZTogUHJvbWlzZTxhbnk+O1xuXG5cbiAgZ2V0IHRoZW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMudGhlbWVTZXJ2aWNlLl90aGVtZTtcbiAgfVxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHRoZW1lU2VydmljZTogTmd4SGlnaGxpZ2h0SnNUaGVtZVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBzY3JpcHRTZXJ2aWNlOiBOZ3hIaWdobGlnaHRKc1NjcmlwdFNlcnZpY2VcbiAgKSB7IH1cblxuICBsb2FkZWQoKTogUHJvbWlzZTxhbnk+IHtcbiAgICBpZiAodGhpcy5fbG9hZGVkUHJvbWlzZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2xvYWRlZFByb21pc2U7XG4gICAgfVxuICAgIGNvbnN0IHByb21pc2VzID0gW3RoaXMuc2NyaXB0U2VydmljZS5sb2FkZWQoKSwgdGhpcy50aGVtZVNlcnZpY2UuaW5pdGlhbGl6ZWQoKV07XG4gICAgdGhpcy5fbG9hZGVkUHJvbWlzZSA9IFByb21pc2UuYWxsKHByb21pc2VzKVxuICAgICAgLnRoZW4oKHJlc3VsdHMpID0+IHtcbiAgICAgICAgdGhpcy5faGxqcyA9IHJlc3VsdHNbMF07XG4gICAgICAgIHJldHVybiAodGhpcy5faGxqcyk7XG4gICAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5fbG9hZGVkUHJvbWlzZTtcbiAgfVxuXG4gIGxvYWRMYW5ndWFnZShsYW5nOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5zY3JpcHRTZXJ2aWNlLmxvYWRMYW5ndWFnZShsYW5nKTtcbiAgfVxuXG4gIGxvYWRUaGVtZShuYW1lOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy50aGVtZVNlcnZpY2UubG9hZFRoZW1lKG5hbWUpO1xuICB9XG5cbiAgaGlnaGxpZ2h0KGxhbmc6IHN0cmluZywgY29kZTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gdGhpcy5sb2FkZWQoKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2FkTGFuZ3VhZ2UobGFuZyk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICBjb25zdCBobCA9IHRoaXMuX2hsanMuaGlnaGxpZ2h0KGxhbmcsIGNvZGUsIHRydWUpLnZhbHVlO1xuICAgICAgICByZXR1cm4gaGw7XG4gICAgICB9KTtcbiAgfVxuXG59XG4iXX0=