/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { Sheetload } from '@nowzoo/sheetload';
import { NGX_HIGHLIGHT_JS_DEFAULT_THEME, NGX_HIGHLIGHT_JS_URL } from './ngx-highlight-js-options';
import * as i0 from "@angular/core";
import * as i1 from "./ngx-highlight-js-options";
export class NgxHighlightJsThemeService {
    /**
     * @param {?} _defaultTheme
     * @param {?} _jsURL
     */
    constructor(_defaultTheme, _jsURL) {
        this._defaultTheme = _defaultTheme;
        this._jsURL = _jsURL;
        this._theme = 'default';
        this._initializedPromise = null;
        this._linkEl = null;
        this._theme = _defaultTheme;
    }
    /**
     * @return {?}
     */
    initialized() {
        if (!this._initializedPromise) {
            this._initializedPromise = this.loadTheme(this._theme);
        }
        return this._initializedPromise;
    }
    /**
     * @param {?} name
     * @return {?}
     */
    loadTheme(name) {
        const /** @type {?} */ url = `${this._jsURL}/styles/${name}.min.css`;
        return Sheetload.load(url)
            .then((linkEl) => {
            if (this._linkEl) {
                this._linkEl.remove();
            }
            this._linkEl = linkEl;
            this._linkEl.removeAttribute('disabled');
        });
    }
    /**
     * @return {?}
     */
    get theme() {
        return this._theme;
    }
}
NgxHighlightJsThemeService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
NgxHighlightJsThemeService.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [NGX_HIGHLIGHT_JS_DEFAULT_THEME,] }] },
    { type: String, decorators: [{ type: Inject, args: [NGX_HIGHLIGHT_JS_URL,] }] }
];
/** @nocollapse */ NgxHighlightJsThemeService.ngInjectableDef = i0.defineInjectable({ factory: function NgxHighlightJsThemeService_Factory() { return new NgxHighlightJsThemeService(i0.inject(i1.NGX_HIGHLIGHT_JS_DEFAULT_THEME), i0.inject(i1.NGX_HIGHLIGHT_JS_URL)); }, token: NgxHighlightJsThemeService, providedIn: "root" });
function NgxHighlightJsThemeService_tsickle_Closure_declarations() {
    /** @type {?} */
    NgxHighlightJsThemeService.prototype._theme;
    /** @type {?} */
    NgxHighlightJsThemeService.prototype._initializedPromise;
    /** @type {?} */
    NgxHighlightJsThemeService.prototype._linkEl;
    /** @type {?} */
    NgxHighlightJsThemeService.prototype._defaultTheme;
    /** @type {?} */
    NgxHighlightJsThemeService.prototype._jsURL;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWhpZ2hsaWdodC1qcy10aGVtZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5vd3pvby9uZ3gtaGlnaGxpZ2h0LWpzLyIsInNvdXJjZXMiOlsibGliL25neC1oaWdobGlnaHQtanMtdGhlbWUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzlDLE9BQU8sRUFDTCw4QkFBOEIsRUFDOUIsb0JBQW9CLEVBQ3JCLE1BQU0sNEJBQTRCLENBQUM7OztBQUtwQyxNQUFNOzs7OztJQUlKLFlBQ2tELGFBQXFCLEVBQy9CLE1BQWM7UUFESixrQkFBYSxHQUFiLGFBQWEsQ0FBUTtRQUMvQixXQUFNLEdBQU4sTUFBTSxDQUFRO3NCQUw3QyxTQUFTO21DQUNtQixJQUFJO3VCQUNkLElBQUk7UUFLN0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxhQUFhLENBQUM7S0FDN0I7Ozs7SUFFRCxXQUFXO1FBQ1QsRUFBRSxDQUFDLENBQUMsQ0FBRSxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDO1lBQy9CLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN4RDtRQUNELE1BQU0sQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUM7S0FDakM7Ozs7O0lBRUQsU0FBUyxDQUFDLElBQVk7UUFDcEIsdUJBQU0sR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sV0FBVyxJQUFJLFVBQVUsQ0FBQztRQUNwRCxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7YUFDdkIsSUFBSSxDQUFDLENBQUMsTUFBdUIsRUFBRSxFQUFFO1lBQ2hDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUNqQixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO2FBQ3ZCO1lBQ0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7WUFDdEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDMUMsQ0FBQyxDQUFDO0tBQ047Ozs7SUFFRCxJQUFJLEtBQUs7UUFDUCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztLQUNwQjs7O1lBbkNGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7Ozt5Q0FNSSxNQUFNLFNBQUMsOEJBQThCO3lDQUNyQyxNQUFNLFNBQUMsb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTaGVldGxvYWQgfSBmcm9tICdAbm93em9vL3NoZWV0bG9hZCc7XG5pbXBvcnQge1xuICBOR1hfSElHSExJR0hUX0pTX0RFRkFVTFRfVEhFTUUsXG4gIE5HWF9ISUdITElHSFRfSlNfVVJMXG59IGZyb20gJy4vbmd4LWhpZ2hsaWdodC1qcy1vcHRpb25zJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTmd4SGlnaGxpZ2h0SnNUaGVtZVNlcnZpY2Uge1xuICBfdGhlbWUgPSAnZGVmYXVsdCc7XG4gIF9pbml0aWFsaXplZFByb21pc2U6IFByb21pc2U8dm9pZD4gPSBudWxsO1xuICBfbGlua0VsOiBIVE1MTGlua0VsZW1lbnQgPSBudWxsO1xuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KE5HWF9ISUdITElHSFRfSlNfREVGQVVMVF9USEVNRSkgcHJpdmF0ZSBfZGVmYXVsdFRoZW1lOiBzdHJpbmcsXG4gICAgQEluamVjdChOR1hfSElHSExJR0hUX0pTX1VSTCkgcHJpdmF0ZSBfanNVUkw6IHN0cmluZ1xuICApIHtcbiAgICB0aGlzLl90aGVtZSA9IF9kZWZhdWx0VGhlbWU7XG4gIH1cblxuICBpbml0aWFsaXplZCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAoISB0aGlzLl9pbml0aWFsaXplZFByb21pc2UpIHtcbiAgICAgIHRoaXMuX2luaXRpYWxpemVkUHJvbWlzZSA9IHRoaXMubG9hZFRoZW1lKHRoaXMuX3RoZW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2luaXRpYWxpemVkUHJvbWlzZTtcbiAgfVxuXG4gIGxvYWRUaGVtZShuYW1lOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCB1cmwgPSBgJHt0aGlzLl9qc1VSTH0vc3R5bGVzLyR7bmFtZX0ubWluLmNzc2A7XG4gICAgcmV0dXJuIFNoZWV0bG9hZC5sb2FkKHVybClcbiAgICAgIC50aGVuKChsaW5rRWw6IEhUTUxMaW5rRWxlbWVudCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5fbGlua0VsKSB7XG4gICAgICAgICAgdGhpcy5fbGlua0VsLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xpbmtFbCA9IGxpbmtFbDtcbiAgICAgICAgdGhpcy5fbGlua0VsLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgZ2V0IHRoZW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3RoZW1lO1xuICB9XG5cbn1cbiJdfQ==