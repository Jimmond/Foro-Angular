/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { NgxHighlightJsService } from './ngx-highlight-js.service';
import { HttpClient } from '@angular/common/http';
export class NgxHighlightJsComponent {
    /**
     * @param {?} service
     * @param {?} http
     */
    constructor(service, http) {
        this.service = service;
        this.http = http;
        this.highlightedHTML = '';
        this.error = null;
        this.afterInit = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.onChange();
        this.afterInit = true;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.afterInit) {
            this.onChange();
        }
    }
    /**
     * @return {?}
     */
    fetchText() {
        if (!this.url) {
            return Promise.resolve(this.code || '');
        }
        return new Promise((resolve, reject) => {
            this.http.get(this.url, { responseType: 'text' }).subscribe((text) => resolve(text), (err) => reject(err));
        });
    }
    /**
     * @return {?}
     */
    onChange() {
        this.error = null;
        this.isInitializing = true;
        this.fetchText()
            .then((text) => {
            return this.service.highlight(this.lang, text);
        })
            .then((hl) => {
            this.highlightedHTML = hl;
            this.isInitializing = false;
        })
            .catch(e => {
            this.error = e.toString();
            this.isInitializing = false;
        });
    }
}
NgxHighlightJsComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-highlight-js',
                exportAs: `ngxHighlightJs`,
                template: `<pre><code
      [ngClass]="'hljs ' + lang"
      [innerHTML]="highlightedHTML"></code></pre>`,
            },] },
];
/** @nocollapse */
NgxHighlightJsComponent.ctorParameters = () => [
    { type: NgxHighlightJsService },
    { type: HttpClient }
];
NgxHighlightJsComponent.propDecorators = {
    code: [{ type: Input }],
    url: [{ type: Input }],
    lang: [{ type: Input }]
};
function NgxHighlightJsComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    NgxHighlightJsComponent.prototype.code;
    /** @type {?} */
    NgxHighlightJsComponent.prototype.url;
    /** @type {?} */
    NgxHighlightJsComponent.prototype.lang;
    /** @type {?} */
    NgxHighlightJsComponent.prototype.highlightedHTML;
    /** @type {?} */
    NgxHighlightJsComponent.prototype.error;
    /** @type {?} */
    NgxHighlightJsComponent.prototype.isInitializing;
    /** @type {?} */
    NgxHighlightJsComponent.prototype.afterInit;
    /** @type {?} */
    NgxHighlightJsComponent.prototype.service;
    /** @type {?} */
    NgxHighlightJsComponent.prototype.http;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWhpZ2hsaWdodC1qcy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abm93em9vL25neC1oaWdobGlnaHQtanMvIiwic291cmNlcyI6WyJsaWIvbmd4LWhpZ2hsaWdodC1qcy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQXFCLEtBQUssRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDbkYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDbkUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBU2xELE1BQU07Ozs7O0lBWUosWUFDVSxTQUNBO1FBREEsWUFBTyxHQUFQLE9BQU87UUFDUCxTQUFJLEdBQUosSUFBSTsrQkFSSSxFQUFFO3FCQUNKLElBQUk7eUJBR0EsS0FBSztLQUtwQjs7OztJQUVMLFFBQVE7UUFDTixJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7S0FDdkI7Ozs7O0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ25CLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUNqQjtLQUNGOzs7O0lBR0QsU0FBUztRQUNQLEVBQUUsQ0FBQyxDQUFDLENBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDZixNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQ3pDO1FBQ0QsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3JDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBQyxZQUFZLEVBQUUsTUFBTSxFQUFDLENBQUMsQ0FBQyxTQUFTLENBQ3ZELENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FDOUMsQ0FBQztTQUNILENBQUMsQ0FBQztLQUVKOzs7O0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1FBQzNCLElBQUksQ0FBQyxTQUFTLEVBQUU7YUFDYixJQUFJLENBQUMsQ0FBQyxJQUFZLEVBQUUsRUFBRTtZQUNyQixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztTQUNoRCxDQUFDO2FBQ0QsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUU7WUFDWCxJQUFJLENBQUMsZUFBZSxHQUFHLEVBQUUsQ0FBQztZQUMxQixJQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQztTQUM3QixDQUFDO2FBQ0QsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ1QsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDMUIsSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUM7U0FDN0IsQ0FBQyxDQUFDO0tBQ047OztZQS9ERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjtnQkFDNUIsUUFBUSxFQUFFLGdCQUFnQjtnQkFDMUIsUUFBUSxFQUFFOztrREFFc0M7YUFDakQ7Ozs7WUFUUSxxQkFBcUI7WUFDckIsVUFBVTs7O21CQVdoQixLQUFLO2tCQUNMLEtBQUs7bUJBQ0wsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBPbkNoYW5nZXMsIElucHV0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ3hIaWdobGlnaHRKc1NlcnZpY2UgfSBmcm9tICcuL25neC1oaWdobGlnaHQtanMuc2VydmljZSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ3gtaGlnaGxpZ2h0LWpzJyxcbiAgZXhwb3J0QXM6IGBuZ3hIaWdobGlnaHRKc2AsXG4gIHRlbXBsYXRlOiBgPHByZT48Y29kZVxuICAgICAgW25nQ2xhc3NdPVwiJ2hsanMgJyArIGxhbmdcIlxuICAgICAgW2lubmVySFRNTF09XCJoaWdobGlnaHRlZEhUTUxcIj48L2NvZGU+PC9wcmU+YCxcbn0pXG5leHBvcnQgY2xhc3MgTmd4SGlnaGxpZ2h0SnNDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG5cbiAgQElucHV0KCkgY29kZTogc3RyaW5nO1xuICBASW5wdXQoKSB1cmw6IHN0cmluZztcbiAgQElucHV0KCkgbGFuZzogc3RyaW5nO1xuXG4gIGhpZ2hsaWdodGVkSFRNTCA9ICcnO1xuICBlcnJvcjogc3RyaW5nID0gbnVsbDtcbiAgaXNJbml0aWFsaXppbmc6IGJvb2xlYW47XG5cbiAgcHJpdmF0ZSBhZnRlckluaXQgPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHNlcnZpY2U6IE5neEhpZ2hsaWdodEpzU2VydmljZSxcbiAgICBwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQsXG4gICkgeyB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgIHRoaXMuYWZ0ZXJJbml0ID0gdHJ1ZTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAodGhpcy5hZnRlckluaXQpIHtcbiAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICB9XG4gIH1cblxuXG4gIGZldGNoVGV4dCgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGlmICghIHRoaXMudXJsKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuY29kZSB8fCAnJyk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmh0dHAuZ2V0KHRoaXMudXJsLCB7cmVzcG9uc2VUeXBlOiAndGV4dCd9KS5zdWJzY3JpYmUoXG4gICAgICAgICh0ZXh0KSA9PiByZXNvbHZlKHRleHQpLCAoZXJyKSA9PiByZWplY3QoZXJyKVxuICAgICAgKTtcbiAgICB9KTtcblxuICB9XG5cbiAgb25DaGFuZ2UoKSB7XG4gICAgdGhpcy5lcnJvciA9IG51bGw7XG4gICAgdGhpcy5pc0luaXRpYWxpemluZyA9IHRydWU7XG4gICAgdGhpcy5mZXRjaFRleHQoKVxuICAgICAgLnRoZW4oKHRleHQ6IHN0cmluZykgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXJ2aWNlLmhpZ2hsaWdodCh0aGlzLmxhbmcsIHRleHQpO1xuICAgICAgfSlcbiAgICAgIC50aGVuKChobCkgPT4ge1xuICAgICAgICB0aGlzLmhpZ2hsaWdodGVkSFRNTCA9IGhsO1xuICAgICAgICB0aGlzLmlzSW5pdGlhbGl6aW5nID0gZmFsc2U7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGUgPT4ge1xuICAgICAgICB0aGlzLmVycm9yID0gZS50b1N0cmluZygpO1xuICAgICAgICB0aGlzLmlzSW5pdGlhbGl6aW5nID0gZmFsc2U7XG4gICAgICB9KTtcbiAgfVxufVxuIl19