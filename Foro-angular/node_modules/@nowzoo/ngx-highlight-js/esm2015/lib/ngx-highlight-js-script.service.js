/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { Scriptload } from '@nowzoo/sheetload';
import { NGX_HIGHLIGHT_JS_URL } from './ngx-highlight-js-options';
import * as i0 from "@angular/core";
import * as i1 from "./ngx-highlight-js-options";
export class NgxHighlightJsScriptService {
    /**
     * @param {?} _jsURL
     */
    constructor(_jsURL) {
        this._jsURL = _jsURL;
        this._hljs = null;
        this._loadedLanguages = new Map();
    }
    /**
     * @return {?}
     */
    loaded() {
        if (this._loadedPromise) {
            return this._loadedPromise;
        }
        this._loadedPromise = new Promise((resolve, reject) => {
            const /** @type {?} */ url = `${this._jsURL}/highlight.min.js`;
            Scriptload.load(url)
                .then(() => {
                setTimeout(() => {
                    this._hljs = window['hljs'];
                    resolve(this._hljs);
                }, 10);
            })
                .catch(reject);
        });
        return this._loadedPromise;
    }
    /**
     * @param {?} lang
     * @return {?}
     */
    loadLanguage(lang) {
        let /** @type {?} */ p = this._loadedLanguages.get(lang);
        if (p) {
            return p;
        }
        if (this._hljs && this._hljs.listLanguages().indexOf(lang) > -1) {
            p = Promise.resolve();
            this._loadedLanguages.set(lang, p);
            return p;
        }
        const /** @type {?} */ url = `${this._jsURL}/languages/${lang}.min.js`;
        p = this.loaded()
            .then(() => {
            return Scriptload.load(url);
        });
        this._loadedLanguages.set(lang, p);
        return p;
    }
}
NgxHighlightJsScriptService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
NgxHighlightJsScriptService.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [NGX_HIGHLIGHT_JS_URL,] }] }
];
/** @nocollapse */ NgxHighlightJsScriptService.ngInjectableDef = i0.defineInjectable({ factory: function NgxHighlightJsScriptService_Factory() { return new NgxHighlightJsScriptService(i0.inject(i1.NGX_HIGHLIGHT_JS_URL)); }, token: NgxHighlightJsScriptService, providedIn: "root" });
function NgxHighlightJsScriptService_tsickle_Closure_declarations() {
    /** @type {?} */
    NgxHighlightJsScriptService.prototype._loadedLanguages;
    /** @type {?} */
    NgxHighlightJsScriptService.prototype._hljs;
    /** @type {?} */
    NgxHighlightJsScriptService.prototype._loadedPromise;
    /** @type {?} */
    NgxHighlightJsScriptService.prototype._jsURL;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWhpZ2hsaWdodC1qcy1zY3JpcHQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bub3d6b28vbmd4LWhpZ2hsaWdodC1qcy8iLCJzb3VyY2VzIjpbImxpYi9uZ3gtaGlnaGxpZ2h0LWpzLXNjcmlwdC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFL0MsT0FBTyxFQUNMLG9CQUFvQixFQUNyQixNQUFNLDRCQUE0QixDQUFDOzs7QUFLcEMsTUFBTTs7OztJQUlKLFlBQ3dDLE1BQWM7UUFBZCxXQUFNLEdBQU4sTUFBTSxDQUFRO3FCQUh6QyxJQUFJO1FBS2YsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7S0FDbkM7Ozs7SUFFRCxNQUFNO1FBQ0osRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7WUFDeEIsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUM7U0FDNUI7UUFDRCxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3BELHVCQUFNLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLG1CQUFtQixDQUFDO1lBQzlDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO2lCQUNqQixJQUFJLENBQUMsR0FBRyxFQUFFO2dCQUNULFVBQVUsQ0FBQyxHQUFHLEVBQUU7b0JBQ2QsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7b0JBQzVCLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQ3JCLEVBQUUsRUFBRSxDQUFDLENBQUM7YUFDUixDQUFDO2lCQUNELEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNsQixDQUFDLENBQUM7UUFDSCxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQztLQUM1Qjs7Ozs7SUFFRCxZQUFZLENBQUMsSUFBWTtRQUN2QixxQkFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN4QyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ04sTUFBTSxDQUFDLENBQUMsQ0FBQztTQUNWO1FBQ0QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDaEUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUN0QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNuQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1NBQ1Y7UUFDRCx1QkFBTSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksU0FBUyxDQUFDO1FBQ3RELENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFO2FBQ2QsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNULE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzdCLENBQUMsQ0FBQztRQUNMLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ25DLE1BQU0sQ0FBQyxDQUFDLENBQUM7S0FDVjs7O1lBaERGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7Ozt5Q0FNSSxNQUFNLFNBQUMsb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTY3JpcHRsb2FkIH0gZnJvbSAnQG5vd3pvby9zaGVldGxvYWQnO1xuXG5pbXBvcnQge1xuICBOR1hfSElHSExJR0hUX0pTX1VSTFxufSBmcm9tICcuL25neC1oaWdobGlnaHQtanMtb3B0aW9ucyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE5neEhpZ2hsaWdodEpzU2NyaXB0U2VydmljZSB7XG4gIF9sb2FkZWRMYW5ndWFnZXM6IE1hcDxzdHJpbmcsIFByb21pc2U8YW55Pj47XG4gIF9obGpzOiBhbnkgPSBudWxsO1xuICBfbG9hZGVkUHJvbWlzZTogUHJvbWlzZTxhbnk+O1xuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KE5HWF9ISUdITElHSFRfSlNfVVJMKSBwcml2YXRlIF9qc1VSTDogc3RyaW5nXG4gICkge1xuICAgIHRoaXMuX2xvYWRlZExhbmd1YWdlcyA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIGxvYWRlZCgpOiBQcm9taXNlPGFueT4ge1xuICAgIGlmICh0aGlzLl9sb2FkZWRQcm9taXNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbG9hZGVkUHJvbWlzZTtcbiAgICB9XG4gICAgdGhpcy5fbG9hZGVkUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IHVybCA9IGAke3RoaXMuX2pzVVJMfS9oaWdobGlnaHQubWluLmpzYDtcbiAgICAgIFNjcmlwdGxvYWQubG9hZCh1cmwpXG4gICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2hsanMgPSB3aW5kb3dbJ2hsanMnXTtcbiAgICAgICAgICAgIHJlc29sdmUodGhpcy5faGxqcyk7XG4gICAgICAgICAgfSwgMTApO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2gocmVqZWN0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5fbG9hZGVkUHJvbWlzZTtcbiAgfVxuXG4gIGxvYWRMYW5ndWFnZShsYW5nOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBsZXQgcCA9IHRoaXMuX2xvYWRlZExhbmd1YWdlcy5nZXQobGFuZyk7XG4gICAgaWYgKHApIHtcbiAgICAgIHJldHVybiBwO1xuICAgIH1cbiAgICBpZiAodGhpcy5faGxqcyAmJiB0aGlzLl9obGpzLmxpc3RMYW5ndWFnZXMoKS5pbmRleE9mKGxhbmcpID4gLTEpIHtcbiAgICAgIHAgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgIHRoaXMuX2xvYWRlZExhbmd1YWdlcy5zZXQobGFuZywgcCk7XG4gICAgICByZXR1cm4gcDtcbiAgICB9XG4gICAgY29uc3QgdXJsID0gYCR7dGhpcy5fanNVUkx9L2xhbmd1YWdlcy8ke2xhbmd9Lm1pbi5qc2A7XG4gICAgcCA9IHRoaXMubG9hZGVkKClcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgcmV0dXJuIFNjcmlwdGxvYWQubG9hZCh1cmwpO1xuICAgICAgfSk7XG4gICAgdGhpcy5fbG9hZGVkTGFuZ3VhZ2VzLnNldChsYW5nLCBwKTtcbiAgICByZXR1cm4gcDtcbiAgfVxufVxuIl19