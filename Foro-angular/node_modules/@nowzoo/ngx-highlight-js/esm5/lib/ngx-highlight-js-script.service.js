/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { Scriptload } from '@nowzoo/sheetload';
import { NGX_HIGHLIGHT_JS_URL } from './ngx-highlight-js-options';
import * as i0 from "@angular/core";
import * as i1 from "./ngx-highlight-js-options";
var NgxHighlightJsScriptService = /** @class */ (function () {
    function NgxHighlightJsScriptService(_jsURL) {
        this._jsURL = _jsURL;
        this._hljs = null;
        this._loadedLanguages = new Map();
    }
    /**
     * @return {?}
     */
    NgxHighlightJsScriptService.prototype.loaded = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this._loadedPromise) {
            return this._loadedPromise;
        }
        this._loadedPromise = new Promise(function (resolve, reject) {
            var /** @type {?} */ url = _this._jsURL + "/highlight.min.js";
            Scriptload.load(url)
                .then(function () {
                setTimeout(function () {
                    _this._hljs = window['hljs'];
                    resolve(_this._hljs);
                }, 10);
            })
                .catch(reject);
        });
        return this._loadedPromise;
    };
    /**
     * @param {?} lang
     * @return {?}
     */
    NgxHighlightJsScriptService.prototype.loadLanguage = /**
     * @param {?} lang
     * @return {?}
     */
    function (lang) {
        var /** @type {?} */ p = this._loadedLanguages.get(lang);
        if (p) {
            return p;
        }
        if (this._hljs && this._hljs.listLanguages().indexOf(lang) > -1) {
            p = Promise.resolve();
            this._loadedLanguages.set(lang, p);
            return p;
        }
        var /** @type {?} */ url = this._jsURL + "/languages/" + lang + ".min.js";
        p = this.loaded()
            .then(function () {
            return Scriptload.load(url);
        });
        this._loadedLanguages.set(lang, p);
        return p;
    };
    NgxHighlightJsScriptService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    NgxHighlightJsScriptService.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [NGX_HIGHLIGHT_JS_URL,] }] }
    ]; };
    /** @nocollapse */ NgxHighlightJsScriptService.ngInjectableDef = i0.defineInjectable({ factory: function NgxHighlightJsScriptService_Factory() { return new NgxHighlightJsScriptService(i0.inject(i1.NGX_HIGHLIGHT_JS_URL)); }, token: NgxHighlightJsScriptService, providedIn: "root" });
    return NgxHighlightJsScriptService;
}());
export { NgxHighlightJsScriptService };
function NgxHighlightJsScriptService_tsickle_Closure_declarations() {
    /** @type {?} */
    NgxHighlightJsScriptService.prototype._loadedLanguages;
    /** @type {?} */
    NgxHighlightJsScriptService.prototype._hljs;
    /** @type {?} */
    NgxHighlightJsScriptService.prototype._loadedPromise;
    /** @type {?} */
    NgxHighlightJsScriptService.prototype._jsURL;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWhpZ2hsaWdodC1qcy1zY3JpcHQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bub3d6b28vbmd4LWhpZ2hsaWdodC1qcy8iLCJzb3VyY2VzIjpbImxpYi9uZ3gtaGlnaGxpZ2h0LWpzLXNjcmlwdC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFL0MsT0FBTyxFQUNMLG9CQUFvQixFQUNyQixNQUFNLDRCQUE0QixDQUFDOzs7O0lBU2xDLHFDQUN3QyxNQUFjO1FBQWQsV0FBTSxHQUFOLE1BQU0sQ0FBUTtxQkFIekMsSUFBSTtRQUtmLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0tBQ25DOzs7O0lBRUQsNENBQU07OztJQUFOO1FBQUEsaUJBZ0JDO1FBZkMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7WUFDeEIsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUM7U0FDNUI7UUFDRCxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU07WUFDaEQscUJBQU0sR0FBRyxHQUFNLEtBQUksQ0FBQyxNQUFNLHNCQUFtQixDQUFDO1lBQzlDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO2lCQUNqQixJQUFJLENBQUM7Z0JBQ0osVUFBVSxDQUFDO29CQUNULEtBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO29CQUM1QixPQUFPLENBQUMsS0FBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUNyQixFQUFFLEVBQUUsQ0FBQyxDQUFDO2FBQ1IsQ0FBQztpQkFDRCxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDbEIsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUM7S0FDNUI7Ozs7O0lBRUQsa0RBQVk7Ozs7SUFBWixVQUFhLElBQVk7UUFDdkIscUJBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDeEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNOLE1BQU0sQ0FBQyxDQUFDLENBQUM7U0FDVjtRQUNELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2hFLENBQUMsR0FBRyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDdEIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDbkMsTUFBTSxDQUFDLENBQUMsQ0FBQztTQUNWO1FBQ0QscUJBQU0sR0FBRyxHQUFNLElBQUksQ0FBQyxNQUFNLG1CQUFjLElBQUksWUFBUyxDQUFDO1FBQ3RELENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFO2FBQ2QsSUFBSSxDQUFDO1lBQ0osTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDN0IsQ0FBQyxDQUFDO1FBQ0wsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDbkMsTUFBTSxDQUFDLENBQUMsQ0FBQztLQUNWOztnQkFoREYsVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7Ozs2Q0FNSSxNQUFNLFNBQUMsb0JBQW9COzs7c0NBZmhDOztTQVVhLDJCQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU2NyaXB0bG9hZCB9IGZyb20gJ0Bub3d6b28vc2hlZXRsb2FkJztcblxuaW1wb3J0IHtcbiAgTkdYX0hJR0hMSUdIVF9KU19VUkxcbn0gZnJvbSAnLi9uZ3gtaGlnaGxpZ2h0LWpzLW9wdGlvbnMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBOZ3hIaWdobGlnaHRKc1NjcmlwdFNlcnZpY2Uge1xuICBfbG9hZGVkTGFuZ3VhZ2VzOiBNYXA8c3RyaW5nLCBQcm9taXNlPGFueT4+O1xuICBfaGxqczogYW55ID0gbnVsbDtcbiAgX2xvYWRlZFByb21pc2U6IFByb21pc2U8YW55PjtcbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChOR1hfSElHSExJR0hUX0pTX1VSTCkgcHJpdmF0ZSBfanNVUkw6IHN0cmluZ1xuICApIHtcbiAgICB0aGlzLl9sb2FkZWRMYW5ndWFnZXMgPSBuZXcgTWFwKCk7XG4gIH1cblxuICBsb2FkZWQoKTogUHJvbWlzZTxhbnk+IHtcbiAgICBpZiAodGhpcy5fbG9hZGVkUHJvbWlzZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2xvYWRlZFByb21pc2U7XG4gICAgfVxuICAgIHRoaXMuX2xvYWRlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCB1cmwgPSBgJHt0aGlzLl9qc1VSTH0vaGlnaGxpZ2h0Lm1pbi5qc2A7XG4gICAgICBTY3JpcHRsb2FkLmxvYWQodXJsKVxuICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9obGpzID0gd2luZG93WydobGpzJ107XG4gICAgICAgICAgICByZXNvbHZlKHRoaXMuX2hsanMpO1xuICAgICAgICAgIH0sIDEwKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKHJlamVjdCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuX2xvYWRlZFByb21pc2U7XG4gIH1cblxuICBsb2FkTGFuZ3VhZ2UobGFuZzogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgbGV0IHAgPSB0aGlzLl9sb2FkZWRMYW5ndWFnZXMuZ2V0KGxhbmcpO1xuICAgIGlmIChwKSB7XG4gICAgICByZXR1cm4gcDtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2hsanMgJiYgdGhpcy5faGxqcy5saXN0TGFuZ3VhZ2VzKCkuaW5kZXhPZihsYW5nKSA+IC0xKSB7XG4gICAgICBwID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICB0aGlzLl9sb2FkZWRMYW5ndWFnZXMuc2V0KGxhbmcsIHApO1xuICAgICAgcmV0dXJuIHA7XG4gICAgfVxuICAgIGNvbnN0IHVybCA9IGAke3RoaXMuX2pzVVJMfS9sYW5ndWFnZXMvJHtsYW5nfS5taW4uanNgO1xuICAgIHAgPSB0aGlzLmxvYWRlZCgpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIHJldHVybiBTY3JpcHRsb2FkLmxvYWQodXJsKTtcbiAgICAgIH0pO1xuICAgIHRoaXMuX2xvYWRlZExhbmd1YWdlcy5zZXQobGFuZywgcCk7XG4gICAgcmV0dXJuIHA7XG4gIH1cbn1cbiJdfQ==