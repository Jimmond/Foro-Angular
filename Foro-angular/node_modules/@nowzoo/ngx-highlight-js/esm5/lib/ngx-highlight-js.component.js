/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { NgxHighlightJsService } from './ngx-highlight-js.service';
import { HttpClient } from '@angular/common/http';
var NgxHighlightJsComponent = /** @class */ (function () {
    function NgxHighlightJsComponent(service, http) {
        this.service = service;
        this.http = http;
        this.highlightedHTML = '';
        this.error = null;
        this.afterInit = false;
    }
    /**
     * @return {?}
     */
    NgxHighlightJsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.onChange();
        this.afterInit = true;
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NgxHighlightJsComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this.afterInit) {
            this.onChange();
        }
    };
    /**
     * @return {?}
     */
    NgxHighlightJsComponent.prototype.fetchText = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.url) {
            return Promise.resolve(this.code || '');
        }
        return new Promise(function (resolve, reject) {
            _this.http.get(_this.url, { responseType: 'text' }).subscribe(function (text) { return resolve(text); }, function (err) { return reject(err); });
        });
    };
    /**
     * @return {?}
     */
    NgxHighlightJsComponent.prototype.onChange = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.error = null;
        this.isInitializing = true;
        this.fetchText()
            .then(function (text) {
            return _this.service.highlight(_this.lang, text);
        })
            .then(function (hl) {
            _this.highlightedHTML = hl;
            _this.isInitializing = false;
        })
            .catch(function (e) {
            _this.error = e.toString();
            _this.isInitializing = false;
        });
    };
    NgxHighlightJsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-highlight-js',
                    exportAs: "ngxHighlightJs",
                    template: "<pre><code\n      [ngClass]=\"'hljs ' + lang\"\n      [innerHTML]=\"highlightedHTML\"></code></pre>",
                },] },
    ];
    /** @nocollapse */
    NgxHighlightJsComponent.ctorParameters = function () { return [
        { type: NgxHighlightJsService },
        { type: HttpClient }
    ]; };
    NgxHighlightJsComponent.propDecorators = {
        code: [{ type: Input }],
        url: [{ type: Input }],
        lang: [{ type: Input }]
    };
    return NgxHighlightJsComponent;
}());
export { NgxHighlightJsComponent };
function NgxHighlightJsComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    NgxHighlightJsComponent.prototype.code;
    /** @type {?} */
    NgxHighlightJsComponent.prototype.url;
    /** @type {?} */
    NgxHighlightJsComponent.prototype.lang;
    /** @type {?} */
    NgxHighlightJsComponent.prototype.highlightedHTML;
    /** @type {?} */
    NgxHighlightJsComponent.prototype.error;
    /** @type {?} */
    NgxHighlightJsComponent.prototype.isInitializing;
    /** @type {?} */
    NgxHighlightJsComponent.prototype.afterInit;
    /** @type {?} */
    NgxHighlightJsComponent.prototype.service;
    /** @type {?} */
    NgxHighlightJsComponent.prototype.http;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWhpZ2hsaWdodC1qcy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abm93em9vL25neC1oaWdobGlnaHQtanMvIiwic291cmNlcyI6WyJsaWIvbmd4LWhpZ2hsaWdodC1qcy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQXFCLEtBQUssRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDbkYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDbkUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDOztJQXFCaEQsaUNBQ1UsU0FDQTtRQURBLFlBQU8sR0FBUCxPQUFPO1FBQ1AsU0FBSSxHQUFKLElBQUk7K0JBUkksRUFBRTtxQkFDSixJQUFJO3lCQUdBLEtBQUs7S0FLcEI7Ozs7SUFFTCwwQ0FBUTs7O0lBQVI7UUFDRSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7S0FDdkI7Ozs7O0lBRUQsNkNBQVc7Ozs7SUFBWCxVQUFZLE9BQXNCO1FBQ2hDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ25CLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUNqQjtLQUNGOzs7O0lBR0QsMkNBQVM7OztJQUFUO1FBQUEsaUJBVUM7UUFUQyxFQUFFLENBQUMsQ0FBQyxDQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ2YsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQztTQUN6QztRQUNELE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNO1lBQ2pDLEtBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUksQ0FBQyxHQUFHLEVBQUUsRUFBQyxZQUFZLEVBQUUsTUFBTSxFQUFDLENBQUMsQ0FBQyxTQUFTLENBQ3ZELFVBQUMsSUFBSSxJQUFLLE9BQUEsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFiLENBQWEsRUFBRSxVQUFDLEdBQUcsSUFBSyxPQUFBLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBWCxDQUFXLENBQzlDLENBQUM7U0FDSCxDQUFDLENBQUM7S0FFSjs7OztJQUVELDBDQUFROzs7SUFBUjtRQUFBLGlCQWVDO1FBZEMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDbEIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7UUFDM0IsSUFBSSxDQUFDLFNBQVMsRUFBRTthQUNiLElBQUksQ0FBQyxVQUFDLElBQVk7WUFDakIsTUFBTSxDQUFDLEtBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDaEQsQ0FBQzthQUNELElBQUksQ0FBQyxVQUFDLEVBQUU7WUFDUCxLQUFJLENBQUMsZUFBZSxHQUFHLEVBQUUsQ0FBQztZQUMxQixLQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQztTQUM3QixDQUFDO2FBQ0QsS0FBSyxDQUFDLFVBQUEsQ0FBQztZQUNOLEtBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQzFCLEtBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO1NBQzdCLENBQUMsQ0FBQztLQUNOOztnQkEvREYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxrQkFBa0I7b0JBQzVCLFFBQVEsRUFBRSxnQkFBZ0I7b0JBQzFCLFFBQVEsRUFBRSxxR0FFc0M7aUJBQ2pEOzs7O2dCQVRRLHFCQUFxQjtnQkFDckIsVUFBVTs7O3VCQVdoQixLQUFLO3NCQUNMLEtBQUs7dUJBQ0wsS0FBSzs7a0NBZlI7O1NBV2EsdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIE9uQ2hhbmdlcywgSW5wdXQsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5neEhpZ2hsaWdodEpzU2VydmljZSB9IGZyb20gJy4vbmd4LWhpZ2hsaWdodC1qcy5zZXJ2aWNlJztcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25neC1oaWdobGlnaHQtanMnLFxuICBleHBvcnRBczogYG5neEhpZ2hsaWdodEpzYCxcbiAgdGVtcGxhdGU6IGA8cHJlPjxjb2RlXG4gICAgICBbbmdDbGFzc109XCInaGxqcyAnICsgbGFuZ1wiXG4gICAgICBbaW5uZXJIVE1MXT1cImhpZ2hsaWdodGVkSFRNTFwiPjwvY29kZT48L3ByZT5gLFxufSlcbmV4cG9ydCBjbGFzcyBOZ3hIaWdobGlnaHRKc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcblxuICBASW5wdXQoKSBjb2RlOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHVybDogc3RyaW5nO1xuICBASW5wdXQoKSBsYW5nOiBzdHJpbmc7XG5cbiAgaGlnaGxpZ2h0ZWRIVE1MID0gJyc7XG4gIGVycm9yOiBzdHJpbmcgPSBudWxsO1xuICBpc0luaXRpYWxpemluZzogYm9vbGVhbjtcblxuICBwcml2YXRlIGFmdGVySW5pdCA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgc2VydmljZTogTmd4SGlnaGxpZ2h0SnNTZXJ2aWNlLFxuICAgIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCxcbiAgKSB7IH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgdGhpcy5hZnRlckluaXQgPSB0cnVlO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmICh0aGlzLmFmdGVySW5pdCkge1xuICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgIH1cbiAgfVxuXG5cbiAgZmV0Y2hUZXh0KCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgaWYgKCEgdGhpcy51cmwpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5jb2RlIHx8ICcnKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuaHR0cC5nZXQodGhpcy51cmwsIHtyZXNwb25zZVR5cGU6ICd0ZXh0J30pLnN1YnNjcmliZShcbiAgICAgICAgKHRleHQpID0+IHJlc29sdmUodGV4dCksIChlcnIpID0+IHJlamVjdChlcnIpXG4gICAgICApO1xuICAgIH0pO1xuXG4gIH1cblxuICBvbkNoYW5nZSgpIHtcbiAgICB0aGlzLmVycm9yID0gbnVsbDtcbiAgICB0aGlzLmlzSW5pdGlhbGl6aW5nID0gdHJ1ZTtcbiAgICB0aGlzLmZldGNoVGV4dCgpXG4gICAgICAudGhlbigodGV4dDogc3RyaW5nKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlcnZpY2UuaGlnaGxpZ2h0KHRoaXMubGFuZywgdGV4dCk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oKGhsKSA9PiB7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0ZWRIVE1MID0gaGw7XG4gICAgICAgIHRoaXMuaXNJbml0aWFsaXppbmcgPSBmYWxzZTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZSA9PiB7XG4gICAgICAgIHRoaXMuZXJyb3IgPSBlLnRvU3RyaW5nKCk7XG4gICAgICAgIHRoaXMuaXNJbml0aWFsaXppbmcgPSBmYWxzZTtcbiAgICAgIH0pO1xuICB9XG59XG4iXX0=