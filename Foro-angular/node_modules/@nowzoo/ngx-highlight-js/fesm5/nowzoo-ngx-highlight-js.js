import { InjectionToken, Injectable, Inject, Component, Input, NgModule, defineInjectable, inject } from '@angular/core';
import { Sheetload, Scriptload } from '@nowzoo/sheetload';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var /** @type {?} */ NGX_HIGHLIGHT_JS_URL = new InjectionToken('The base url for highlight.js');
var /** @type {?} */ NGX_HIGHLIGHT_JS_DEFAULT_THEME = new InjectionToken('The default theme for highlight.js');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NgxHighlightJsThemeService = /** @class */ (function () {
    function NgxHighlightJsThemeService(_defaultTheme, _jsURL) {
        this._defaultTheme = _defaultTheme;
        this._jsURL = _jsURL;
        this._theme = 'default';
        this._initializedPromise = null;
        this._linkEl = null;
        this._theme = _defaultTheme;
    }
    /**
     * @return {?}
     */
    NgxHighlightJsThemeService.prototype.initialized = /**
     * @return {?}
     */
    function () {
        if (!this._initializedPromise) {
            this._initializedPromise = this.loadTheme(this._theme);
        }
        return this._initializedPromise;
    };
    /**
     * @param {?} name
     * @return {?}
     */
    NgxHighlightJsThemeService.prototype.loadTheme = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        var _this = this;
        var /** @type {?} */ url = this._jsURL + "/styles/" + name + ".min.css";
        return Sheetload.load(url)
            .then(function (linkEl) {
            if (_this._linkEl) {
                _this._linkEl.remove();
            }
            _this._linkEl = linkEl;
            _this._linkEl.removeAttribute('disabled');
        });
    };
    Object.defineProperty(NgxHighlightJsThemeService.prototype, "theme", {
        get: /**
         * @return {?}
         */
        function () {
            return this._theme;
        },
        enumerable: true,
        configurable: true
    });
    NgxHighlightJsThemeService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    NgxHighlightJsThemeService.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [NGX_HIGHLIGHT_JS_DEFAULT_THEME,] }] },
        { type: String, decorators: [{ type: Inject, args: [NGX_HIGHLIGHT_JS_URL,] }] }
    ]; };
    /** @nocollapse */ NgxHighlightJsThemeService.ngInjectableDef = defineInjectable({ factory: function NgxHighlightJsThemeService_Factory() { return new NgxHighlightJsThemeService(inject(NGX_HIGHLIGHT_JS_DEFAULT_THEME), inject(NGX_HIGHLIGHT_JS_URL)); }, token: NgxHighlightJsThemeService, providedIn: "root" });
    return NgxHighlightJsThemeService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NgxHighlightJsScriptService = /** @class */ (function () {
    function NgxHighlightJsScriptService(_jsURL) {
        this._jsURL = _jsURL;
        this._hljs = null;
        this._loadedLanguages = new Map();
    }
    /**
     * @return {?}
     */
    NgxHighlightJsScriptService.prototype.loaded = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this._loadedPromise) {
            return this._loadedPromise;
        }
        this._loadedPromise = new Promise(function (resolve, reject) {
            var /** @type {?} */ url = _this._jsURL + "/highlight.min.js";
            Scriptload.load(url)
                .then(function () {
                setTimeout(function () {
                    _this._hljs = window['hljs'];
                    resolve(_this._hljs);
                }, 10);
            })
                .catch(reject);
        });
        return this._loadedPromise;
    };
    /**
     * @param {?} lang
     * @return {?}
     */
    NgxHighlightJsScriptService.prototype.loadLanguage = /**
     * @param {?} lang
     * @return {?}
     */
    function (lang) {
        var /** @type {?} */ p = this._loadedLanguages.get(lang);
        if (p) {
            return p;
        }
        if (this._hljs && this._hljs.listLanguages().indexOf(lang) > -1) {
            p = Promise.resolve();
            this._loadedLanguages.set(lang, p);
            return p;
        }
        var /** @type {?} */ url = this._jsURL + "/languages/" + lang + ".min.js";
        p = this.loaded()
            .then(function () {
            return Scriptload.load(url);
        });
        this._loadedLanguages.set(lang, p);
        return p;
    };
    NgxHighlightJsScriptService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    NgxHighlightJsScriptService.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [NGX_HIGHLIGHT_JS_URL,] }] }
    ]; };
    /** @nocollapse */ NgxHighlightJsScriptService.ngInjectableDef = defineInjectable({ factory: function NgxHighlightJsScriptService_Factory() { return new NgxHighlightJsScriptService(inject(NGX_HIGHLIGHT_JS_URL)); }, token: NgxHighlightJsScriptService, providedIn: "root" });
    return NgxHighlightJsScriptService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NgxHighlightJsService = /** @class */ (function () {
    function NgxHighlightJsService(themeService, scriptService) {
        this.themeService = themeService;
        this.scriptService = scriptService;
    }
    Object.defineProperty(NgxHighlightJsService.prototype, "theme", {
        get: /**
         * @return {?}
         */
        function () {
            return this.themeService._theme;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgxHighlightJsService.prototype.loaded = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this._loadedPromise) {
            return this._loadedPromise;
        }
        var /** @type {?} */ promises = [this.scriptService.loaded(), this.themeService.initialized()];
        this._loadedPromise = Promise.all(promises)
            .then(function (results) {
            _this._hljs = results[0];
            return (_this._hljs);
        });
        return this._loadedPromise;
    };
    /**
     * @param {?} lang
     * @return {?}
     */
    NgxHighlightJsService.prototype.loadLanguage = /**
     * @param {?} lang
     * @return {?}
     */
    function (lang) {
        return this.scriptService.loadLanguage(lang);
    };
    /**
     * @param {?} name
     * @return {?}
     */
    NgxHighlightJsService.prototype.loadTheme = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return this.themeService.loadTheme(name);
    };
    /**
     * @param {?} lang
     * @param {?} code
     * @return {?}
     */
    NgxHighlightJsService.prototype.highlight = /**
     * @param {?} lang
     * @param {?} code
     * @return {?}
     */
    function (lang, code) {
        var _this = this;
        return this.loaded()
            .then(function () {
            return _this.loadLanguage(lang);
        })
            .then(function () {
            var /** @type {?} */ hl = _this._hljs.highlight(lang, code, true).value;
            return hl;
        });
    };
    NgxHighlightJsService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    NgxHighlightJsService.ctorParameters = function () { return [
        { type: NgxHighlightJsThemeService },
        { type: NgxHighlightJsScriptService }
    ]; };
    /** @nocollapse */ NgxHighlightJsService.ngInjectableDef = defineInjectable({ factory: function NgxHighlightJsService_Factory() { return new NgxHighlightJsService(inject(NgxHighlightJsThemeService), inject(NgxHighlightJsScriptService)); }, token: NgxHighlightJsService, providedIn: "root" });
    return NgxHighlightJsService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NgxHighlightJsComponent = /** @class */ (function () {
    function NgxHighlightJsComponent(service, http) {
        this.service = service;
        this.http = http;
        this.highlightedHTML = '';
        this.error = null;
        this.afterInit = false;
    }
    /**
     * @return {?}
     */
    NgxHighlightJsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.onChange();
        this.afterInit = true;
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NgxHighlightJsComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this.afterInit) {
            this.onChange();
        }
    };
    /**
     * @return {?}
     */
    NgxHighlightJsComponent.prototype.fetchText = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.url) {
            return Promise.resolve(this.code || '');
        }
        return new Promise(function (resolve, reject) {
            _this.http.get(_this.url, { responseType: 'text' }).subscribe(function (text) { return resolve(text); }, function (err) { return reject(err); });
        });
    };
    /**
     * @return {?}
     */
    NgxHighlightJsComponent.prototype.onChange = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.error = null;
        this.isInitializing = true;
        this.fetchText()
            .then(function (text) {
            return _this.service.highlight(_this.lang, text);
        })
            .then(function (hl) {
            _this.highlightedHTML = hl;
            _this.isInitializing = false;
        })
            .catch(function (e) {
            _this.error = e.toString();
            _this.isInitializing = false;
        });
    };
    NgxHighlightJsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-highlight-js',
                    exportAs: "ngxHighlightJs",
                    template: "<pre><code\n      [ngClass]=\"'hljs ' + lang\"\n      [innerHTML]=\"highlightedHTML\"></code></pre>",
                },] },
    ];
    /** @nocollapse */
    NgxHighlightJsComponent.ctorParameters = function () { return [
        { type: NgxHighlightJsService },
        { type: HttpClient }
    ]; };
    NgxHighlightJsComponent.propDecorators = {
        code: [{ type: Input }],
        url: [{ type: Input }],
        lang: [{ type: Input }]
    };
    return NgxHighlightJsComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NgxHighlightJsModule = /** @class */ (function () {
    function NgxHighlightJsModule() {
    }
    /**
     * @return {?}
     */
    NgxHighlightJsModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: NgxHighlightJsModule,
            providers: [
                NgxHighlightJsThemeService,
                NgxHighlightJsScriptService,
                NgxHighlightJsService,
                { provide: NGX_HIGHLIGHT_JS_URL, useValue: '//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0' },
                { provide: NGX_HIGHLIGHT_JS_DEFAULT_THEME, useValue: 'default' },
            ]
        };
    };
    NgxHighlightJsModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        HttpClientModule
                    ],
                    declarations: [NgxHighlightJsComponent],
                    exports: [NgxHighlightJsComponent],
                },] },
    ];
    return NgxHighlightJsModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { NGX_HIGHLIGHT_JS_URL, NGX_HIGHLIGHT_JS_DEFAULT_THEME, NgxHighlightJsService, NgxHighlightJsModule, NgxHighlightJsScriptService as ɵb, NgxHighlightJsThemeService as ɵa, NgxHighlightJsComponent as ɵc };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm93em9vLW5neC1oaWdobGlnaHQtanMuanMubWFwIiwic291cmNlcyI6WyJuZzovL0Bub3d6b28vbmd4LWhpZ2hsaWdodC1qcy9saWIvbmd4LWhpZ2hsaWdodC1qcy1vcHRpb25zLnRzIiwibmc6Ly9Abm93em9vL25neC1oaWdobGlnaHQtanMvbGliL25neC1oaWdobGlnaHQtanMtdGhlbWUuc2VydmljZS50cyIsIm5nOi8vQG5vd3pvby9uZ3gtaGlnaGxpZ2h0LWpzL2xpYi9uZ3gtaGlnaGxpZ2h0LWpzLXNjcmlwdC5zZXJ2aWNlLnRzIiwibmc6Ly9Abm93em9vL25neC1oaWdobGlnaHQtanMvbGliL25neC1oaWdobGlnaHQtanMuc2VydmljZS50cyIsIm5nOi8vQG5vd3pvby9uZ3gtaGlnaGxpZ2h0LWpzL2xpYi9uZ3gtaGlnaGxpZ2h0LWpzLmNvbXBvbmVudC50cyIsIm5nOi8vQG5vd3pvby9uZ3gtaGlnaGxpZ2h0LWpzL2xpYi9uZ3gtaGlnaGxpZ2h0LWpzLm1vZHVsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuZXhwb3J0IGNvbnN0IE5HWF9ISUdITElHSFRfSlNfVVJMID0gbmV3IEluamVjdGlvblRva2VuPHN0cmluZz4oJ1RoZSBiYXNlIHVybCBmb3IgaGlnaGxpZ2h0LmpzJyk7XG5leHBvcnQgY29uc3QgTkdYX0hJR0hMSUdIVF9KU19ERUZBVUxUX1RIRU1FID0gbmV3IEluamVjdGlvblRva2VuPHN0cmluZz4oJ1RoZSBkZWZhdWx0IHRoZW1lIGZvciBoaWdobGlnaHQuanMnKTtcbiIsImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU2hlZXRsb2FkIH0gZnJvbSAnQG5vd3pvby9zaGVldGxvYWQnO1xuaW1wb3J0IHtcbiAgTkdYX0hJR0hMSUdIVF9KU19ERUZBVUxUX1RIRU1FLFxuICBOR1hfSElHSExJR0hUX0pTX1VSTFxufSBmcm9tICcuL25neC1oaWdobGlnaHQtanMtb3B0aW9ucyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE5neEhpZ2hsaWdodEpzVGhlbWVTZXJ2aWNlIHtcbiAgX3RoZW1lID0gJ2RlZmF1bHQnO1xuICBfaW5pdGlhbGl6ZWRQcm9taXNlOiBQcm9taXNlPHZvaWQ+ID0gbnVsbDtcbiAgX2xpbmtFbDogSFRNTExpbmtFbGVtZW50ID0gbnVsbDtcbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChOR1hfSElHSExJR0hUX0pTX0RFRkFVTFRfVEhFTUUpIHByaXZhdGUgX2RlZmF1bHRUaGVtZTogc3RyaW5nLFxuICAgIEBJbmplY3QoTkdYX0hJR0hMSUdIVF9KU19VUkwpIHByaXZhdGUgX2pzVVJMOiBzdHJpbmdcbiAgKSB7XG4gICAgdGhpcy5fdGhlbWUgPSBfZGVmYXVsdFRoZW1lO1xuICB9XG5cbiAgaW5pdGlhbGl6ZWQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKCEgdGhpcy5faW5pdGlhbGl6ZWRQcm9taXNlKSB7XG4gICAgICB0aGlzLl9pbml0aWFsaXplZFByb21pc2UgPSB0aGlzLmxvYWRUaGVtZSh0aGlzLl90aGVtZSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9pbml0aWFsaXplZFByb21pc2U7XG4gIH1cblxuICBsb2FkVGhlbWUobmFtZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgdXJsID0gYCR7dGhpcy5fanNVUkx9L3N0eWxlcy8ke25hbWV9Lm1pbi5jc3NgO1xuICAgIHJldHVybiBTaGVldGxvYWQubG9hZCh1cmwpXG4gICAgICAudGhlbigobGlua0VsOiBIVE1MTGlua0VsZW1lbnQpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuX2xpbmtFbCkge1xuICAgICAgICAgIHRoaXMuX2xpbmtFbC5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9saW5rRWwgPSBsaW5rRWw7XG4gICAgICAgIHRoaXMuX2xpbmtFbC5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XG4gICAgICB9KTtcbiAgfVxuXG4gIGdldCB0aGVtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl90aGVtZTtcbiAgfVxuXG59XG4iLCJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNjcmlwdGxvYWQgfSBmcm9tICdAbm93em9vL3NoZWV0bG9hZCc7XG5cbmltcG9ydCB7XG4gIE5HWF9ISUdITElHSFRfSlNfVVJMXG59IGZyb20gJy4vbmd4LWhpZ2hsaWdodC1qcy1vcHRpb25zJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTmd4SGlnaGxpZ2h0SnNTY3JpcHRTZXJ2aWNlIHtcbiAgX2xvYWRlZExhbmd1YWdlczogTWFwPHN0cmluZywgUHJvbWlzZTxhbnk+PjtcbiAgX2hsanM6IGFueSA9IG51bGw7XG4gIF9sb2FkZWRQcm9taXNlOiBQcm9taXNlPGFueT47XG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoTkdYX0hJR0hMSUdIVF9KU19VUkwpIHByaXZhdGUgX2pzVVJMOiBzdHJpbmdcbiAgKSB7XG4gICAgdGhpcy5fbG9hZGVkTGFuZ3VhZ2VzID0gbmV3IE1hcCgpO1xuICB9XG5cbiAgbG9hZGVkKCk6IFByb21pc2U8YW55PiB7XG4gICAgaWYgKHRoaXMuX2xvYWRlZFByb21pc2UpIHtcbiAgICAgIHJldHVybiB0aGlzLl9sb2FkZWRQcm9taXNlO1xuICAgIH1cbiAgICB0aGlzLl9sb2FkZWRQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgdXJsID0gYCR7dGhpcy5fanNVUkx9L2hpZ2hsaWdodC5taW4uanNgO1xuICAgICAgU2NyaXB0bG9hZC5sb2FkKHVybClcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5faGxqcyA9IHdpbmRvd1snaGxqcyddO1xuICAgICAgICAgICAgcmVzb2x2ZSh0aGlzLl9obGpzKTtcbiAgICAgICAgICB9LCAxMCk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChyZWplY3QpO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLl9sb2FkZWRQcm9taXNlO1xuICB9XG5cbiAgbG9hZExhbmd1YWdlKGxhbmc6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGxldCBwID0gdGhpcy5fbG9hZGVkTGFuZ3VhZ2VzLmdldChsYW5nKTtcbiAgICBpZiAocCkge1xuICAgICAgcmV0dXJuIHA7XG4gICAgfVxuICAgIGlmICh0aGlzLl9obGpzICYmIHRoaXMuX2hsanMubGlzdExhbmd1YWdlcygpLmluZGV4T2YobGFuZykgPiAtMSkge1xuICAgICAgcCA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgdGhpcy5fbG9hZGVkTGFuZ3VhZ2VzLnNldChsYW5nLCBwKTtcbiAgICAgIHJldHVybiBwO1xuICAgIH1cbiAgICBjb25zdCB1cmwgPSBgJHt0aGlzLl9qc1VSTH0vbGFuZ3VhZ2VzLyR7bGFuZ30ubWluLmpzYDtcbiAgICBwID0gdGhpcy5sb2FkZWQoKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICByZXR1cm4gU2NyaXB0bG9hZC5sb2FkKHVybCk7XG4gICAgICB9KTtcbiAgICB0aGlzLl9sb2FkZWRMYW5ndWFnZXMuc2V0KGxhbmcsIHApO1xuICAgIHJldHVybiBwO1xuICB9XG59XG4iLCJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ3hIaWdobGlnaHRKc1RoZW1lU2VydmljZSB9IGZyb20gJy4vbmd4LWhpZ2hsaWdodC1qcy10aGVtZS5zZXJ2aWNlJztcbmltcG9ydCB7IE5neEhpZ2hsaWdodEpzU2NyaXB0U2VydmljZSB9IGZyb20gJy4vbmd4LWhpZ2hsaWdodC1qcy1zY3JpcHQuc2VydmljZSc7XG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBOZ3hIaWdobGlnaHRKc1NlcnZpY2Uge1xuICBwcml2YXRlIF9obGpzOiBhbnk7XG4gIHByaXZhdGUgX2xvYWRlZFByb21pc2U6IFByb21pc2U8YW55PjtcblxuXG4gIGdldCB0aGVtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnRoZW1lU2VydmljZS5fdGhlbWU7XG4gIH1cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB0aGVtZVNlcnZpY2U6IE5neEhpZ2hsaWdodEpzVGhlbWVTZXJ2aWNlLFxuICAgIHByaXZhdGUgc2NyaXB0U2VydmljZTogTmd4SGlnaGxpZ2h0SnNTY3JpcHRTZXJ2aWNlXG4gICkgeyB9XG5cbiAgbG9hZGVkKCk6IFByb21pc2U8YW55PiB7XG4gICAgaWYgKHRoaXMuX2xvYWRlZFByb21pc2UpIHtcbiAgICAgIHJldHVybiB0aGlzLl9sb2FkZWRQcm9taXNlO1xuICAgIH1cbiAgICBjb25zdCBwcm9taXNlcyA9IFt0aGlzLnNjcmlwdFNlcnZpY2UubG9hZGVkKCksIHRoaXMudGhlbWVTZXJ2aWNlLmluaXRpYWxpemVkKCldO1xuICAgIHRoaXMuX2xvYWRlZFByb21pc2UgPSBQcm9taXNlLmFsbChwcm9taXNlcylcbiAgICAgIC50aGVuKChyZXN1bHRzKSA9PiB7XG4gICAgICAgIHRoaXMuX2hsanMgPSByZXN1bHRzWzBdO1xuICAgICAgICByZXR1cm4gKHRoaXMuX2hsanMpO1xuICAgICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuX2xvYWRlZFByb21pc2U7XG4gIH1cblxuICBsb2FkTGFuZ3VhZ2UobGFuZzogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMuc2NyaXB0U2VydmljZS5sb2FkTGFuZ3VhZ2UobGFuZyk7XG4gIH1cblxuICBsb2FkVGhlbWUobmFtZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMudGhlbWVTZXJ2aWNlLmxvYWRUaGVtZShuYW1lKTtcbiAgfVxuXG4gIGhpZ2hsaWdodChsYW5nOiBzdHJpbmcsIGNvZGU6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIHRoaXMubG9hZGVkKClcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9hZExhbmd1YWdlKGxhbmcpO1xuICAgICAgfSlcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgY29uc3QgaGwgPSB0aGlzLl9obGpzLmhpZ2hsaWdodChsYW5nLCBjb2RlLCB0cnVlKS52YWx1ZTtcbiAgICAgICAgcmV0dXJuIGhsO1xuICAgICAgfSk7XG4gIH1cblxufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIE9uQ2hhbmdlcywgSW5wdXQsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5neEhpZ2hsaWdodEpzU2VydmljZSB9IGZyb20gJy4vbmd4LWhpZ2hsaWdodC1qcy5zZXJ2aWNlJztcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25neC1oaWdobGlnaHQtanMnLFxuICBleHBvcnRBczogYG5neEhpZ2hsaWdodEpzYCxcbiAgdGVtcGxhdGU6IGA8cHJlPjxjb2RlXG4gICAgICBbbmdDbGFzc109XCInaGxqcyAnICsgbGFuZ1wiXG4gICAgICBbaW5uZXJIVE1MXT1cImhpZ2hsaWdodGVkSFRNTFwiPjwvY29kZT48L3ByZT5gLFxufSlcbmV4cG9ydCBjbGFzcyBOZ3hIaWdobGlnaHRKc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcblxuICBASW5wdXQoKSBjb2RlOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHVybDogc3RyaW5nO1xuICBASW5wdXQoKSBsYW5nOiBzdHJpbmc7XG5cbiAgaGlnaGxpZ2h0ZWRIVE1MID0gJyc7XG4gIGVycm9yOiBzdHJpbmcgPSBudWxsO1xuICBpc0luaXRpYWxpemluZzogYm9vbGVhbjtcblxuICBwcml2YXRlIGFmdGVySW5pdCA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgc2VydmljZTogTmd4SGlnaGxpZ2h0SnNTZXJ2aWNlLFxuICAgIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCxcbiAgKSB7IH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgdGhpcy5hZnRlckluaXQgPSB0cnVlO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmICh0aGlzLmFmdGVySW5pdCkge1xuICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgIH1cbiAgfVxuXG5cbiAgZmV0Y2hUZXh0KCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgaWYgKCEgdGhpcy51cmwpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5jb2RlIHx8ICcnKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuaHR0cC5nZXQodGhpcy51cmwsIHtyZXNwb25zZVR5cGU6ICd0ZXh0J30pLnN1YnNjcmliZShcbiAgICAgICAgKHRleHQpID0+IHJlc29sdmUodGV4dCksIChlcnIpID0+IHJlamVjdChlcnIpXG4gICAgICApO1xuICAgIH0pO1xuXG4gIH1cblxuICBvbkNoYW5nZSgpIHtcbiAgICB0aGlzLmVycm9yID0gbnVsbDtcbiAgICB0aGlzLmlzSW5pdGlhbGl6aW5nID0gdHJ1ZTtcbiAgICB0aGlzLmZldGNoVGV4dCgpXG4gICAgICAudGhlbigodGV4dDogc3RyaW5nKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlcnZpY2UuaGlnaGxpZ2h0KHRoaXMubGFuZywgdGV4dCk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oKGhsKSA9PiB7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0ZWRIVE1MID0gaGw7XG4gICAgICAgIHRoaXMuaXNJbml0aWFsaXppbmcgPSBmYWxzZTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZSA9PiB7XG4gICAgICAgIHRoaXMuZXJyb3IgPSBlLnRvU3RyaW5nKCk7XG4gICAgICAgIHRoaXMuaXNJbml0aWFsaXppbmcgPSBmYWxzZTtcbiAgICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycywgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBIdHRwQ2xpZW50TW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgTmd4SGlnaGxpZ2h0SnNUaGVtZVNlcnZpY2UgfSBmcm9tICcuL25neC1oaWdobGlnaHQtanMtdGhlbWUuc2VydmljZSc7XG5pbXBvcnQgeyBOZ3hIaWdobGlnaHRKc1NjcmlwdFNlcnZpY2UgfSBmcm9tICcuL25neC1oaWdobGlnaHQtanMtc2NyaXB0LnNlcnZpY2UnO1xuaW1wb3J0IHsgTmd4SGlnaGxpZ2h0SnNTZXJ2aWNlIH0gZnJvbSAnLi9uZ3gtaGlnaGxpZ2h0LWpzLnNlcnZpY2UnO1xuaW1wb3J0IHtcbiAgTkdYX0hJR0hMSUdIVF9KU19ERUZBVUxUX1RIRU1FLFxuICBOR1hfSElHSExJR0hUX0pTX1VSTFxufSBmcm9tICcuL25neC1oaWdobGlnaHQtanMtb3B0aW9ucyc7XG5pbXBvcnQgeyBOZ3hIaWdobGlnaHRKc0NvbXBvbmVudCB9IGZyb20gJy4vbmd4LWhpZ2hsaWdodC1qcy5jb21wb25lbnQnO1xuXG5cblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZSxcbiAgICBIdHRwQ2xpZW50TW9kdWxlXG4gIF0sXG4gIGRlY2xhcmF0aW9uczogW05neEhpZ2hsaWdodEpzQ29tcG9uZW50XSxcbiAgZXhwb3J0czogW05neEhpZ2hsaWdodEpzQ29tcG9uZW50XSxcbn0pXG5leHBvcnQgY2xhc3MgTmd4SGlnaGxpZ2h0SnNNb2R1bGUge1xuICBzdGF0aWMgZm9yUm9vdCgpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IE5neEhpZ2hsaWdodEpzTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIE5neEhpZ2hsaWdodEpzVGhlbWVTZXJ2aWNlLFxuICAgICAgICBOZ3hIaWdobGlnaHRKc1NjcmlwdFNlcnZpY2UsXG4gICAgICAgIE5neEhpZ2hsaWdodEpzU2VydmljZSxcbiAgICAgICAge3Byb3ZpZGU6IE5HWF9ISUdITElHSFRfSlNfVVJMLCB1c2VWYWx1ZTogJy8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2hpZ2hsaWdodC5qcy85LjEyLjAnfSxcbiAgICAgICAge3Byb3ZpZGU6IE5HWF9ISUdITElHSFRfSlNfREVGQVVMVF9USEVNRSwgdXNlVmFsdWU6ICdkZWZhdWx0J30sXG4gICAgICBdXG4gICAgfTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLHFCQUNhLG9CQUFvQixHQUFHLElBQUksY0FBYyxDQUFTLCtCQUErQixDQUFDLENBQUM7QUFDaEcscUJBQWEsOEJBQThCLEdBQUcsSUFBSSxjQUFjLENBQVMsb0NBQW9DLENBQUM7Ozs7OztBQ0Y5RztJQWNFLG9DQUNrRCxhQUFxQixFQUMvQixNQUFjO1FBREosa0JBQWEsR0FBYixhQUFhLENBQVE7UUFDL0IsV0FBTSxHQUFOLE1BQU0sQ0FBUTtzQkFMN0MsU0FBUzttQ0FDbUIsSUFBSTt1QkFDZCxJQUFJO1FBSzdCLElBQUksQ0FBQyxNQUFNLEdBQUcsYUFBYSxDQUFDO0tBQzdCOzs7O0lBRUQs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